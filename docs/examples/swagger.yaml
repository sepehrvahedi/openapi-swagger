openapi: 3.0.0
info:
  title: API مدیریت کاربران
  description: |
    یک API کامل برای مدیریت کاربران که شامل عملیات CRUD است.

    ## ویژگی‌های API:
    - ایجاد کاربر جدید
    - دریافت لیست کاربران
    - دریافت اطلاعات یک کاربر
    - به‌روزرسانی اطلاعات کاربر
    - حذف کاربر

    ## نحوه استفاده:
    1. برای تست API از رابط تعاملی زیر استفاده کنید
    2. تمام endpoint ها از JSON پشتیبانی می‌کنند
    3. برای عملیات POST و PUT، header `Content-Type: application/json` الزامی است
  version: 1.0.0
  contact:
    name: تیم توسعه
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: سرور توسعه محلی
  - url: https://api.example.com
    description: سرور تولید

tags:
  - name: کاربران
    description: عملیات مربوط به مدیریت کاربران

paths:
  /api/users:
    get:
      tags: [کاربران]
      summary: دریافت لیست کاربران
      description: دریافت لیست تمام کاربران موجود در سیستم
      operationId: getUsers
      responses:
        '200':
          description: لیست کاربران
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                نمونه_پاسخ:
                  value:
                    - id: 1
                      name: "احمد محمدی"
                      email: "ahmad@example.com"
                      age: 25
                    - id: 2
                      name: "فاطمه احمدی"
                      email: "fateme@example.com"
                      age: 30
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      tags: [کاربران]
      summary: ایجاد کاربر جدید
      description: اضافه کردن کاربر جدید به سیستم
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            examples:
              کاربر_نمونه:
                value:
                  name: "علی رضایی"
                  email: "ali@example.com"
                  age: 28
      responses:
        '201':
          description: کاربر با موفقیت ایجاد شد
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/users/{id}:
    get:
      tags: [کاربران]
      summary: دریافت اطلاعات کاربر
      description: دریافت اطلاعات یک کاربر خاص بر اساس ID
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: اطلاعات کاربر
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [کاربران]
      summary: به‌روزرسانی کاربر
      description: به‌روزرسانی اطلاعات یک کاربر موجود
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: کاربر با موفقیت به‌روزرسانی شد
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [کاربران]
      summary: حذف کاربر
      description: حذف یک کاربر از سیستم
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: کاربر با موفقیت حذف شد
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "کاربر با موفقیت حذف شد"
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: شناسه یکتای کاربر
          example: 1
          readOnly: true
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: نام و نام خانوادگی کاربر
          example: "احمد محمدی"
        email:
          type: string
          format: email
          description: آدرس ایمیل کاربر
          example: "ahmad@example.com"
        age:
          type: integer
          minimum: 1
          maximum: 120
          description: سن کاربر (اختیاری)
          example: 25
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: تاریخ ایجاد حساب کاربری
          readOnly: true
          example: "2024-01-15T10:30:00Z"

    UserInput:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: نام و نام خانوادگی کاربر
          example: "احمد محمدی"
        email:
          type: string
          format: email
          description: آدرس ایمیل کاربر
          example: "ahmad@example.com"
        age:
          type: integer
          minimum: 1
          maximum: 120
          description: سن کاربر (اختیاری)
          example: 25
          nullable: true

    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
          description: پیام توضیحی خطا
          example: "کاربر یافت نشد"
        code:
          type: integer
          description: کد عددی خطا
          example: 404
        details:
          type: array
          description: جزئیات بیشتر خطا (در صورت وجود)
          items:
            type: string
          example: ["فیلد نام الزامی است", "فرمت ایمیل نادرست است"]

  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: شناسه عددی کاربر
      schema:
        type: integer
        format: int64
        minimum: 1
        example: 1

  responses:
    NotFound:
      description: منبع درخواستی یافت نشد
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "کاربر با این شناسه یافت نشد"
            code: 404

    BadRequest:
      description: درخواست نامعتبر
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "داده‌های ورودی نامعتبر"
            code: 400
            details: ["نام الزامی است", "فرمت ایمیل صحیح نیست"]

    ServerError:
      description: خطای داخلی سرور
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "خطای داخلی سرور"
            code: 500

  examples:
    SampleUser:
      value:
        id: 1
        name: "احمد محمدی"
        email: "ahmad@example.com"
        age: 25
        createdAt: "2024-01-15T10:30:00Z"

    SampleUserInput:
      value:
        name: "علی رضایی"
        email: "ali@example.com"
        age: 28

security: []
